# If you want to modify any of these parameters, simply uncomment the
# relevant line and adjust the value.

# ----- initialization -----
# Determines whether the server runs in "promiscuous login" mode. If 
# server.mode=research, then brokers do not need passwords or other
# authentication credentials beyond their usernames. If
# server.mode=tournament, the brokers will not be logged in without
# credentials issued by the tournament scheduler.
#server.mode = research

# Name of bootstrap data file. Used for output in bootstrap mode, input
# for sim mode.
#server.bootstrapDataFile = boot-data.xml

# Filename suffix for server logfiles. The server will generate two logfiles
# as it runs, named "powertac-suffix.trace" and "powertac-suffix.state"
#server.logfileSuffix = default

# Real-time length of a bootstrap timeslot in milliseconds. The server can run
# much faster without attached broker agents.
# Values less than 300 may cause trouble.
#server.competitionControlService.bootstrapTimeslotMillis = 400

# Maximum time in milliseconds to wait for broker logins in sim mode.
# A value of 0 means no timeout - the server will wait forever for the
# last broker to log in. 
#server.competitionControlService.loginTimeout = 0

# Minimum time interval between last outgoing server message and beginning
# of next timeslot in sim mode.
#server.simulationClockControl.minAgentWindow = 2000

# Network address of the message queue broker for this server
#server.jmsManagementService.jmsBrokerUrl = tcp://localhost:61616

# Weather service Configuration
# Location of weather server
#server.weatherService.serverUrl = http://tac06.cs.umn.edu:8080/powertac-weather-server/weatherSet/weatherRequest?id=0&setname=default&weather_days=1&weather_id=

# Timeslot interval to make requests
#server.weatherService.weatherReqInterval = 12

# If network calls to weather server should block until finished
#server.weatherService.blocking = true

# Length of forecasts (in hours)
#server.weatherService.forecastHorizon = 24

# ----- competition -----
# Start date/time for the beginning of the simulation scenario. Note that this
# is actually the start of the bootstrap period. Format is yyyy-mm-dd, and the
# clock always starts at midnight. Timezone is not supported. Can be set only
# bootstrap mode.
#common.competition.simulationBaseTime = 2009-10-10

# Timezone offset from UTC in hours for sim locale
#common.competition.timezoneOffset = -6

# Approximate latitude in degrees north for sim locale
#common.competition.latitude = 45

# Number of timeslots during bootstrap mode for which data is collected
#common.competition.bootstrapTimeslotCount = 336

# Number of timeslots at the beginning of bootstrap mode for which data
# is discarded
#common.competition.bootstrapDiscardedTimeslots = 24

# Minimum number of timeslots in simulation, not including the bootstrap
# period
#common.competition.minimumTimeslotCount = 1400

# Expected number of timeslots for a simulation. Must be >= minimumTimeslotCount
#common.competition.expectedTimeslotCount = 1440

# Length of individual timeslot, in simulation minutes. Can be set only
# in bootstrap mode
#common.competition.timeslotLength = 60

# Real-time length of a simulation timeslot in seconds. Note that if the
# specified value does not evenly divide into the timeslotLength, the 
# actual value will be the next larger integer that is a factor of 60.
#common.competition.simulationTimeslotSeconds = 5

# Number of timeslots simultaneously open for trading. Can be set only in
# bootstrap mode.
#common.competition.timeslotsOpen = 24

# Number of timeslots closed for trading at any time, including the
# current timeslot. Can be set only in bootstrap mode.
#common.competition.deactivateTimeslotsAhead = 1

# Minimum order quantity for the wholesale market in MWh.
#common.competition.minimumOrderQuantity = 0.01

# Number of timeslots in the bootstrap period. Can be set only in bootstrap
# mode.
#common.competition.bootstrapTimeslotCount = 336

# ----- accounting -----
# Interest rate on bank deposits. If not set explicitly, the value will be
# chosen randomly between minInterest and maxInterest
#accounting.accountingService.minInterest = 0.04
#accounting.accountingService.maxInterest = 0.12
#accounting.accountingService.bankInterest = 0.06

# ----- tariff market -----
# Fee for new tariff publication. Range is [-1000 -5000]
tariffmarket.tariffMarketService.minPublicationFee = -1000.0
tariffmarket.tariffMarketService.maxPublicationFee = -5000.0
# Set the fee directly to override random selection
#tariffMarketService.publicationFee=-100.0

# Fee for revoking a tariff. Range is [-100 -500]
#tariffmarket.TariffMarketService.minRevocationFee = -100.0
#tariffmarket.TariffMarketService.maxRevocationFee = -500.0
# Set the fee directly to override random selection
#tariffmarket.TariffMarketService.revocationFee = -50.0

# Number of timeslots between tariff publication events. Default is 6
#tariffmarket.tariffMarketService.publicationInterval = 6

# Number of timeslots from the first timeslot to delay the first
# publication event. Default is 1. It does not work well to make this
# zero, because brokers will not have an opportunity to post tariffs
# in timeslot 0.
tariffmarket.tariffMarketService.publicationOffset = 1

# ----- wholesale market ------
# Maximum seller margin
#auctioneer.auctionService.sellerMaxMargin = 0.05

# Proportion of market surplus that goes to the seller. Default is 0.5.
# May be overridden by sellerMaxMargin
#auctioneer.auctionService.sellerSurplusRatio = 0.5

# Default margin when setting a clearing price between a limit order and
# a market order. Default is 0.2.
# May be overridden by sellerMaxMargin
auctioneer.auctionService.defaultMargin = 0.2

# Default price/mwh when matching only market orders
#auctioneer.auctionService.defaultClearingPrice = 40.0

# Initial max market position per broker in MWh
auctioneer.auctionService.mktPosnLimitInitial = 180.0

# Final max market position per broker
auctioneer.auctionService.mktPosnLimitFinal = 220.0

# --------- Genco: wholesale market players ----------
# Whether to use CpGenco and MisoBuyer
# genco.simpleGencoService.useCpGenco = true
# genco.simpleGencoService.useMisoBuyer = true

# CpGenco properties
# std deviation for price
#genco.cpGenco.pSigma = 0.1
# std deviation ratio for quantity
#genco.cpGenco.qSigma = 0.005
# interval between nominal prices
#genco.cpGenco.priceInterval = 6.0
# minimum total quantity to offer
#genco.cpGenco.minQuantity = 1500.0
# quadratic coefficients
#genco.cpGenco.coefficients = .00004132, 0.00182, 14.0
# congestion threshold
#genco.cpGenco.kneeDemand = 900.0
# random-walk parameters sigma_a, offset_a
#genco.cpGenco.rwaSigma = 0.004
#genco.cpGenco.rwaOffset = 0.0025
# random-walk parameters sigma_c, offset_c
#genco.cpGenco.rwcSigma = 0.005
#genco.cpGenco.rwcOffset = 0.002

# MisoBuyer properties
# Scale the hourly demand by this factor. The mean hourly demand in the original
# MISO data is 13660 MW. The default value gives a mean demand roughly 10x
# the mean Power TAC demand.
#genco.misoBuyer.scaleFactor = 0.049

# Temperature above the coolThreshold leads to cooling,
# and temperature below the heatThreshold leads to heating,
# proportional to the temperature-threshold difference.
# The coefficients determine the energy needed for a degree-hour
# of cooling and heating respectively. 
#genco.misoBuyer.coolThreshold = 20.0
#genco.misoBuyer.coolCoef = 1200.0
#genco.misoBuyer.heatThreshold = 17.0
#genco.misoBuyer.heatCoef = -170.0
#genco.misoBuyer.tempAlpha = 0.1

# -------------- Balancing market -------------------
# Spot price/mwh used if unavailable from wholesale market
balancemkt.balancingMarketService.defaultSpotPrice = 75.0

# Balancing settlement processing: blank for no controllable capacity,
# Use "static" for per-timeslot processing of balancing orders.
# Use "simple" for no processing of balancing orders.
balancemkt.balancingMarketService.settlementProcess = static

# Parameters for static settlement processor ----

# Premium and per-kWh fee over spot price for balancing energy
balancemkt.balancingMarketService.rmPremium = 2.0
balancemkt.balancingMarketService.rmFee = 0.035

# Slope of regulating power cost for positive and negative quantities
# Units are $/kwh
balancemkt.balancingMarketService.pPlusPrime =  0.000001
balancemkt.balancingMarketService.pMinusPrime = -0.000001

# -------------- Distribution utility -------------------
# Fee structure
distributionutility.distributionUtilityService.useTransportFee = false
distributionutility.distributionUtilityService.useCapacityFee = true
distributionutility.distributionUtilityService.useMeterFee = true

# Low & high ends of transport fee range
distributionutility.distributionUtilityService.distributionFeeMin = -0.003
distributionutility.distributionUtilityService.distributionFeeMax = -0.03
# Transport fee: overrides random value selection
#distributionutility.distributionUtilityService.distributionFee = -0.01

# Per-timeslot fixed meter fee for small meters
#distributionutility.distributionUtilityService.mSmall = -0.015

# Per-timeslot fixed meter fee for large meters
#distributionutility.distributionUtilityService.mLarge = -0.05

# Peak-demand assessment interval and number of peaks to record
#distributionutility.distributionUtilityService.assessmentInterval = 168
#distributionutility.distributionUtilityService.assessmentCount = 3

# Peak-demand std deviation multiplier
#distributionutility.distributionUtilityService.stdCoefficient = 1.2

# Per-point peak-demand fee
#distributionutility.distributionUtilityService.feePerPoint = -180.0


# --------------- Default broker -------------------
# Fixed price/kwh for default consumption tariff
du.defaultBrokerService.consumptionRate = -0.50

# Fixed price/kwh for default production tariff
du.defaultBrokerService.productionRate = 0.01

# Quantity to buy in day-ahead market before seeing actual customer data
du.defaultBrokerService.initialBidKWh = 1000.0

# Initial limit price/mwh for bids in day-ahead market
du.defaultBrokerService.buyLimitPriceMax = -5.0 

# Final limit price/mwh for bids in day-ahead market
du.defaultBrokerService.buyLimitPriceMin = -100.0

# Initial limit price/mwh for asks in day-ahead market
du.defaultBrokerService.sellLimitPriceMax = 30.0

# Final limit price/mwh for asks in day-ahead market
du.defaultBrokerService.sellLimitPriceMin = 0.1

# --------------- Household Customer -------------------
# Name of configuration file of the household customer. Used as input
# for sim mode.
householdcustomer.householdCustomerService.configFile1 = VillageType1.properties

# --------------- Office Complex Customer -------------------
# Name of configuration file of the office complex customer. Used as input
# for sim mode.
officecomplexcustomer.officeComplexCustomerService.configFile1 = OfficeComplexType1.properties

# -------------- JMS -------------------
#server.jmsManagementService.jmsBrokerUrl = tcp://localhost:61616

# ------------ Proxy service -----------
#socks.proxy.host = 192.168.4.22
#socks.proxy.port = 1080
